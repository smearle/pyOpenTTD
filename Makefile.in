# $Id$

# This file is part of OpenTTD.
# OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
# OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.

# Check if we want to show what we are doing
ifdef VERBOSE
	Q =
else
	Q = @
endif

include Makefile.am

CONFIG_CACHE_PWD         = !!CONFIG_CACHE_PWD!!
CONFIG_CACHE_SOURCE_LIST = !!CONFIG_CACHE_SOURCE_LIST!!
BIN_DIR        = !!BIN_DIR!!
ICON_THEME_DIR = !!ICON_THEME_DIR!!
MAN_DIR        = !!MAN_DIR!!
MENU_DIR       = !!MENU_DIR!!
SRC_DIR        = !!SRC_DIR!!
ROOT_DIR       = !!ROOT_DIR!!
BUNDLE_DIR     = "$(ROOT_DIR)/bundle"
BUNDLES_DIR    = "$(ROOT_DIR)/bundles"
INSTALL_DIR    = !!INSTALL_DIR!!
INSTALL_BINARY_DIR     = "$(INSTALL_DIR)/"!!BINARY_DIR!!
INSTALL_MAN_DIR        = "$(INSTALL_DIR)/$(MAN_DIR)"
INSTALL_MENU_DIR       = "$(INSTALL_DIR)/$(MENU_DIR)"
INSTALL_ICON_DIR       = "$(INSTALL_DIR)/"!!ICON_DIR!!
INSTALL_ICON_THEME_DIR = "$(INSTALL_DIR)/$(ICON_THEME_DIR)"
INSTALL_DATA_DIR       = "$(INSTALL_DIR)/"!!DATA_DIR!!
INSTALL_DOC_DIR        = "$(INSTALL_DIR)/"!!DOC_DIR!!
SOURCE_LIST     = !!SOURCE_LIST!!
CONFIGURE_FILES = !!CONFIGURE_FILES!!
BINARY_NAME = !!BINARY_NAME!!
STRIP       = !!STRIP!!
TTD         = !!TTD!!
TTDS        = $(SRC_DIRS:%=%/$(TTD))
OS          = !!OS!!
OSXAPP      = !!OSXAPP!!
LIPO        = !!LIPO!!
AWK         = !!AWK!!
SORT        = !!SORT!!
DISTCC      = !!DISTCC!!

RES := $(shell if [ ! -f $(CONFIG_CACHE_PWD) ] || [ "`pwd`" != "`cat $(CONFIG_CACHE_PWD)`" ]; then echo "`pwd`" > $(CONFIG_CACHE_PWD); fi )
RES := $(shell if [ ! -f $(CONFIG_CACHE_SOURCE_LIST) ] || [ -n "`cmp $(CONFIG_CACHE_SOURCE_LIST) $(SOURCE_LIST) 2>/dev/null`" ]; then cp $(SOURCE_LIST) $(CONFIG_CACHE_SOURCE_LIST); fi )

all: config.pwd config.cache
ifdef DISTCC
	@if [ -z "`echo '$(MFLAGS)' | grep '\-j'`" ]; then echo; echo "WARNING: you enabled distcc support, but you don't seem to be using the -jN paramter"; echo; fi
endif
	@for dir in $(DIRS); do \
		$(MAKE) -C $$dir all || exit 1; \
	done
ifdef LIPO
# Lipo is an OSX thing. If it is defined, it means we are building for universal,
# and so we have have to combine the binaries into one big binary

# Remove the last binary made by the last compiled target
	$(Q)rm -f $(BIN_DIR)/$(TTD)
# Make all the binaries into one
	$(Q)$(LIPO) -create -output $(BIN_DIR)/$(TTD) $(TTDS)
endif

help:
	@echo "Available make commands:"
	@echo ""
	@echo "Compilation:"
	@echo "  all           compile the executable and the lang files"
	@echo "  lang          compile the lang files only"
	@echo "Clean up:"
	@echo "  clean         remove the files generated during compilation"
	@echo "  mrproper      remove the files generated during configuration and compilation"
	@echo "Run after compilation:"
	@echo "  run           execute openttd after the compilation"
	@echo "  run-gdb       execute openttd in debug mode after the compilation"
	@echo "  run-prof      execute openttd in profiling mode after the compilation"
	@echo "Installation:"
	@echo "  install       install the compiled files and the data-files after the compilation"
	@echo "  bundle        create the base for an installation bundle"
	@echo "  bundle_zip    create the zip installation bundle"
	@echo "  bundle_gzip   create the gzip installation bundle"
	@echo "  bundle_bzip2  create the bzip2 installation bundle"
	@echo "  bundle_lha    create the lha installation bundle"
	@echo "  bundle_dmg    create the dmg installation bundle"

config.pwd: $(CONFIG_CACHE_PWD)
	$(MAKE) reconfigure

config.cache: $(CONFIG_CACHE_SOURCE_LIST) $(CONFIGURE_FILES)
	$(MAKE) reconfigure

reconfigure:
ifeq ($(shell if test -f config.cache; then echo 1; fi), 1)
	@echo "----------------"
	@echo "The system detected that source.list or any configure file is altered."
	@echo " Going to reconfigure with last known settings..."
	@echo "----------------"
# Make sure we don't lock config.cache
	@$(shell cat config.cache | sed 's@\\ @\\\\ @g') || exit 1
	@echo "----------------"
	@echo "Reconfig done. Please re-execute make."
	@echo "----------------"
else
	@echo "----------------"
	@echo "Have not found a configuration, please run configure first."
	@echo "----------------"
	@exit 1
endif

clean:
	@for dir in $(DIRS); do \
		$(MAKE) -C $$dir clean; \
	done
	$(Q)rm -rf $(BUNDLE_TARGET)

lang:
	@for dir in $(LANG_DIRS); do \
		$(MAKE) -C $$dir all; \
	done

mrproper:
	@for dir in $(DIRS); do \
		$(MAKE) -C $$dir mrproper; \
	done
# Don't be tempted to merge these two for loops. Doing that breaks make
# --dry-run, since make has this "feature" that it always runs commands
# containing $(MAKE), even when --dry-run is passed. The objective is of
# course to also get a dry-run of submakes, but make is not smart enough
# to see that a for loop runs both a submake and an actual command.
	@for dir in $(DIRS); do \
		rm -f $$dir/Makefile; \
	done
	$(Q)rm -rf objs
	$(Q)rm -f Makefile Makefile.am Makefile.bundle
	$(Q)rm -f media/openttd.desktop media/openttd.desktop.install
	$(Q)rm -f $(CONFIG_CACHE_SOURCE_LIST) config.cache config.pwd config.log $(CONFIG_CACHE_PWD)
# directories for bundle generation
	$(Q)rm -rf $(BUNDLE_DIR)
	$(Q)rm -rf $(BUNDLES_DIR)
# output of profiling
	$(Q)rm -f $(BIN_DIR)/gmon.out
# output of generating 'API' documentation
	$(Q)rm -rf $(ROOT_DIR)/docs/source
	$(Q)rm -rf $(ROOT_DIR)/docs/aidocs
	$(Q)rm -rf $(ROOT_DIR)/docs/gamedocs
# directories created by OpenTTD on regression testing
	$(Q)rm -rf $(BIN_DIR)/ai/regression/content_download $(BIN_DIR)/ai/regression/save $(BIN_DIR)/ai/regression/scenario
distclean: mrproper

maintainer-clean: distclean
	$(Q)rm -f $(BIN_DIR)/baseset/openttd.grf $(BIN_DIR)/baseset/orig_extra.grf $(BIN_DIR)/baseset/*.obg $(BIN_DIR)/baseset/*.obs $(BIN_DIR)/baseset/*.obm

depend:
	@for dir in $(SRC_DIRS); do \
		$(MAKE) -C $$dir depend; \
	done

run: all
	$(Q)cd !!BIN_DIR!! && ./!!TTD!! $(OPENTTD_ARGS)

run-gdb: all
	$(Q)cd !!BIN_DIR!! && gdb --ex run --args ./!!TTD!! $(OPENTTD_ARGS)

run-prof: all
	$(Q)cd !!BIN_DIR!! && ./!!TTD!! $(OPENTTD_ARGS) && gprof !!TTD!! | less

regression: all
	$(Q)cd !!BIN_DIR!! && sh ai/regression/run.sh
test: regression

%.o:
	@for dir in $(SRC_DIRS); do \
		$(MAKE) -C $$dir $(@:src/%=%); \
	done

%.lng:
	@for dir in $(LANG_DIRS); do \
		$(MAKE) -C $$dir $@; \
	done

.PHONY: test distclean mrproper clean

include Makefile.bundle

#PYTHON = python3
#SWIG = swig3.0
#
#PYTHONBUILDDIR = $(shell python3 -c 'from distutils import sysconfig, util ; \
#	print("lib.%s-%s" \
#		% (util.get_platform(), sysconfig.get_config_var("VERSION")))')
#
#SOURCES = \
#    src/aircraft_cmd.cpp \
#    src/aircraft_gui.cpp \
#    src/airport.cpp \
#    src/airport_gui.cpp \
#    src/animated_tile.cpp \
#    src/articulated_vehicles.cpp \
#    src/autoreplace_cmd.cpp \
#    src/autoreplace.cpp \
#    src/autoreplace_gui.cpp \
#   src/base_consist.cpp \
#   src/bmp.cpp \
#   src/bootstrap_gui.cpp \
#   src/bridge_gui.cpp \
#   src/bridge_map.cpp \
#   src/build_vehicle_gui.cpp \
#   src/cargoaction.cpp \
#   src/cargomonitor.cpp \
#   src/cargopacket.cpp \
#   src/cargotype.cpp \
#   src/cheat.cpp \
#   src/cheat_gui.cpp \
#   src/clear_cmd.cpp \
#   src/command.cpp \
#   src/company_cmd.cpp \
#   src/company_gui.cpp \
#   src/console_cmds.cpp \
#   src/console.cpp \
#   src/console_gui.cpp \
#   src/cpu.cpp \
#   src/crashlog.cpp \
#   src/currency.cpp \
#   src/date.cpp \
#   src/date_gui.cpp \
#   src/debug.cpp \
#   src/dedicated.cpp \
#   src/depot_cmd.cpp \
#   src/depot.cpp \
#   src/depot_gui.cpp \
#   src/disaster_vehicle.cpp \
#   src/dock_gui.cpp \
#   src/driver.cpp \
#   src/economy.cpp \
#   src/effectvehicle.cpp \
#   src/elrail.cpp \
#   src/engine.cpp \
#   src/engine_gui.cpp \
#   src/error_gui.cpp \
#   src/fileio.cpp \
#   src/fios.cpp \
#   src/fios_gui.cpp \
#   src/fontcache.cpp \
#   src/fontdetection.cpp \
#   src/framerate_gui.cpp \
#   src/gamelog.cpp \
#   src/genworld.cpp \
#   src/genworld_gui.cpp \
#   src/gfx.cpp \
#   src/gfxinit.cpp \
#   src/gfx_layout.cpp \
#   src/goal.cpp \
#   src/goal_gui.cpp \
#   src/graph_gui.cpp \
#   src/ground_vehicle.cpp \
#   src/group_cmd.cpp \
#   src/group_gui.cpp \
#   src/heightmap.cpp \
#   src/highscore.cpp \
#   src/highscore_gui.cpp \
#   src/hotkeys.cpp \
#   src/industry_cmd.cpp \
#   src/industry_gui.cpp \
#   src/ini.cpp \
#   src/ini_load.cpp \
#   src/intro_gui.cpp \
#   src/landscape.cpp \
#   src/main_gui.cpp \
#   src/map.cpp \
#   src/misc_cmd.cpp \
#   src/misc.cpp \
#   src/misc_gui.cpp \
#   src/mixer.cpp \
#   src/music.cpp \
#   src/music_gui.cpp \
#   src/newgrf_airport.cpp \
#   src/newgrf_airporttiles.cpp \
#   src/newgrf_canal.cpp \
#   src/newgrf_cargo.cpp \
#   src/newgrf_commons.cpp \
#   src/newgrf_config.cpp \
#   src/newgrf.cpp \
#   src/newgrf_debug_gui.cpp \
#   src/newgrf_engine.cpp \
#   src/newgrf_generic.cpp \
#   src/newgrf_gui.cpp \
#   src/newgrf_house.cpp \
#   src/newgrf_industries.cpp \
#   src/newgrf_industrytiles.cpp \
#   src/newgrf_object.cpp \
#   src/newgrf_railtype.cpp \
#   src/newgrf_sound.cpp \
#   src/newgrf_spritegroup.cpp \
#   src/newgrf_station.cpp \
#   src/newgrf_storage.cpp \
#   src/newgrf_text.cpp \
#   src/newgrf_town.cpp \
#   src/newgrf_townname.cpp \
#   src/news_gui.cpp \
#   src/object_cmd.cpp \
#   src/object_gui.cpp \
#   src/openttd.cpp \
#   src/order_backup.cpp \
#   src/order_cmd.cpp \
#   src/order_gui.cpp \
#   src/osk_gui.cpp \
#   src/pbs.cpp \
#   src/progress.cpp \
#   src/rail_cmd.cpp \
#   src/rail.cpp \
#   src/rail_gui.cpp \
#   src/rev.cpp \
#   src/road_cmd.cpp \
#   src/road.cpp \
#   src/road_gui.cpp \
#   src/road_map.cpp \
#   src/roadstop.cpp \
#   src/roadveh_cmd.cpp \
#   src/roadveh_gui.cpp \
#   src/screenshot.cpp \
#   src/sdl.cpp \
#   src/settings.cpp \
#   src/settings_gui.cpp \
#   src/ship_cmd.cpp \
#   src/ship_gui.cpp \
#   src/signal.cpp \
#   src/signs_cmd.cpp \
#   src/signs.cpp \
#   src/signs_gui.cpp \
#   src/smallmap_gui.cpp \
#   src/sound.cpp \
#   src/spritecache.cpp \
#   src/sprite.cpp \
#   src/station_cmd.cpp \
#   src/station.cpp \
#   src/station_gui.cpp \
#   src/statusbar_gui.cpp \
#   src/story.cpp \
#   src/story_gui.cpp \
#   src/string.cpp \
#   src/stringfilter.cpp \
#   src/strings.cpp \
#   src/subsidy.cpp \
#   src/subsidy_gui.cpp \
#   src/terraform_cmd.cpp \
#   src/terraform_gui.cpp \
#   src/textbuf.cpp \
#   src/texteff.cpp \
#   src/textfile_gui.cpp \
#   src/tgp.cpp \
#   src/tilearea.cpp \
#   src/tile_map.cpp \
#   src/timetable_cmd.cpp \
#   src/timetable_gui.cpp \
#   src/toolbar_gui.cpp \
#   src/town_cmd.cpp \
#   src/town_gui.cpp \
#   src/townname.cpp \
#   src/train_cmd.cpp \
#   src/train_gui.cpp \
#   src/transparency_gui.cpp \
#   src/tree_cmd.cpp \
#   src/tree_gui.cpp \
#   src/tunnelbridge_cmd.cpp \
#   src/tunnel_map.cpp \
#   src/vehicle_cmd.cpp \
#   src/vehicle.cpp \
#   src/vehicle_gui.cpp \
#   src/vehiclelist.cpp \
#   src/viewport.cpp \
#   src/viewport_gui.cpp \
#   src/viewport_sprite_sorter_sse4.cpp \
#   src/void_cmd.cpp \
#   src/water_cmd.cpp \
#   src/waypoint_cmd.cpp \
#   src/waypoint.cpp \
#   src/waypoint_gui.cpp \
#   src/widget.cpp \
#    src/window.cpp \
#    src/widgets/dropdown.cpp \
#   src/ai/ai_config.cpp
# 
# HEADERS = \
#	  src/openttd.h \
#	  src/widgets \
#	  src \
#	  /usr/include \
#	  src/ai \
# 	  src/livery.h
#
#.PHONY: build_python build_swig clean
#
## ----------------------------------------------------------------------
#
#
## ----------------------------------------------------------------------
## Python extension module build
#
#all: objs/$(PYTHONBUILDDIR)/_openttd.so
#
#objs/$(PYTHONBUILDDIR)/_openttd.so: build_swig setup.py $(SOURCES) $(HEADERS)
#	$(PYTHON) setup.py build --build-base=objs
#
## ----------------------------------------------------------------------
## SWIG build
#
## make does not understand that both 'objs/micropolisengine_wrap.cpp' and
## 'objs/micropolisengine.py' are generated by SWIG. To get around this,
## 'objs/micropolisengine_wrap.cpp' is used as dependency for controlling SWIG
## even if we want to get the 'objs/micropolisengine.py' file.
#
#build_swig: objs/openttd_wrap.cpp
#
#objs/openttd_wrap.cpp: swig/openttd.i swig/openttd-swig-python.i $(HEADERS)
#	$(SWIG) -python -py3 -c++ -Isrc -Wall \
#	        -outdir objs \
#		-o objs/openttd_wrap.cpp \
#		swig/openttd.i
#
## ----------------------------------------------------------------------
#
#clean:
#	rm -rf *~ *.ncb */~
#	rm -rf swig/*~ objs/* build
#	rm -rf python/*~ python/*.pyc python/*.pyd
#
## XXX This is not needed
#cleanswig: clean
#	rm -rf python/openttd.py python/openttd_wrap.cpp
#
#install: all
#	($(PYTHON) setup.py install)
#
##
## NOTE: Dependencies below are not used (since Python distutils is building
##       the binary, and not gcc & make
##
## Python extension module build
#
## ...(put such dependencies here?)


